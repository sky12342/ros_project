// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file state_error.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_STATE_AND_ERROR_STATE_ERROR_H_
#define _FAST_DDS_GENERATED_STATE_AND_ERROR_STATE_ERROR_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(STATE_ERROR_SOURCE)
#define STATE_ERROR_DllAPI __declspec( dllexport )
#else
#define STATE_ERROR_DllAPI __declspec( dllimport )
#endif // STATE_ERROR_SOURCE
#else
#define STATE_ERROR_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define STATE_ERROR_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima



namespace state_and_error {



/*!
 * @brief This class represents the structure State defined by the user in the IDL file.
 * @ingroup state_error
 */
class State
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport State();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~State();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object state_and_error::State that will be copied.
     */
    eProsima_user_DllExport State(
            const State& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object state_and_error::State that will be copied.
     */
    eProsima_user_DllExport State(
            State&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object state_and_error::State that will be copied.
     */
    eProsima_user_DllExport State& operator =(
            const State& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object state_and_error::State that will be copied.
     */
    eProsima_user_DllExport State& operator =(
            State&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x state_and_error::State object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const State& x) const;

    /*!
     * @brief Comparison operator.
     * @param x state_and_error::State object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const State& x) const;

    /*!
     * @brief This function sets a value in member status
     * @param _status New value for member status
     */
    eProsima_user_DllExport void status(
            int32_t _status);

    /*!
     * @brief This function returns the value of member status
     * @return Value of member status
     */
    eProsima_user_DllExport int32_t status() const;

    /*!
     * @brief This function returns a reference to member status
     * @return Reference to member status
     */
    eProsima_user_DllExport int32_t& status();


    /*!
     * @brief This function sets a value in member current_x
     * @param _current_x New value for member current_x
     */
    eProsima_user_DllExport void current_x(
            double _current_x);

    /*!
     * @brief This function returns the value of member current_x
     * @return Value of member current_x
     */
    eProsima_user_DllExport double current_x() const;

    /*!
     * @brief This function returns a reference to member current_x
     * @return Reference to member current_x
     */
    eProsima_user_DllExport double& current_x();


    /*!
     * @brief This function sets a value in member current_y
     * @param _current_y New value for member current_y
     */
    eProsima_user_DllExport void current_y(
            double _current_y);

    /*!
     * @brief This function returns the value of member current_y
     * @return Value of member current_y
     */
    eProsima_user_DllExport double current_y() const;

    /*!
     * @brief This function returns a reference to member current_y
     * @return Reference to member current_y
     */
    eProsima_user_DllExport double& current_y();


    /*!
     * @brief This function sets a value in member current_theta
     * @param _current_theta New value for member current_theta
     */
    eProsima_user_DllExport void current_theta(
            double _current_theta);

    /*!
     * @brief This function returns the value of member current_theta
     * @return Value of member current_theta
     */
    eProsima_user_DllExport double current_theta() const;

    /*!
     * @brief This function returns a reference to member current_theta
     * @return Reference to member current_theta
     */
    eProsima_user_DllExport double& current_theta();


    /*!
     * @brief This function sets a value in member linear_velocity
     * @param _linear_velocity New value for member linear_velocity
     */
    eProsima_user_DllExport void linear_velocity(
            double _linear_velocity);

    /*!
     * @brief This function returns the value of member linear_velocity
     * @return Value of member linear_velocity
     */
    eProsima_user_DllExport double linear_velocity() const;

    /*!
     * @brief This function returns a reference to member linear_velocity
     * @return Reference to member linear_velocity
     */
    eProsima_user_DllExport double& linear_velocity();


    /*!
     * @brief This function sets a value in member angular_velocity
     * @param _angular_velocity New value for member angular_velocity
     */
    eProsima_user_DllExport void angular_velocity(
            double _angular_velocity);

    /*!
     * @brief This function returns the value of member angular_velocity
     * @return Value of member angular_velocity
     */
    eProsima_user_DllExport double angular_velocity() const;

    /*!
     * @brief This function returns a reference to member angular_velocity
     * @return Reference to member angular_velocity
     */
    eProsima_user_DllExport double& angular_velocity();


    /*!
     * @brief This function copies the value in member feedback_message
     * @param _feedback_message New value to be copied in member feedback_message
     */
    eProsima_user_DllExport void feedback_message(
            const std::string& _feedback_message);

    /*!
     * @brief This function moves the value in member feedback_message
     * @param _feedback_message New value to be moved in member feedback_message
     */
    eProsima_user_DllExport void feedback_message(
            std::string&& _feedback_message);

    /*!
     * @brief This function returns a constant reference to member feedback_message
     * @return Constant reference to member feedback_message
     */
    eProsima_user_DllExport const std::string& feedback_message() const;

    /*!
     * @brief This function returns a reference to member feedback_message
     * @return Reference to member feedback_message
     */
    eProsima_user_DllExport std::string& feedback_message();

private:

    int32_t m_status{0};
    double m_current_x{0.0};
    double m_current_y{0.0};
    double m_current_theta{0.0};
    double m_linear_velocity{0.0};
    double m_angular_velocity{0.0};
    std::string m_feedback_message;

};


/*!
 * @brief This class represents the structure ErrorCode defined by the user in the IDL file.
 * @ingroup state_error
 */
class ErrorCode
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ErrorCode();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ErrorCode();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object state_and_error::ErrorCode that will be copied.
     */
    eProsima_user_DllExport ErrorCode(
            const ErrorCode& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object state_and_error::ErrorCode that will be copied.
     */
    eProsima_user_DllExport ErrorCode(
            ErrorCode&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object state_and_error::ErrorCode that will be copied.
     */
    eProsima_user_DllExport ErrorCode& operator =(
            const ErrorCode& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object state_and_error::ErrorCode that will be copied.
     */
    eProsima_user_DllExport ErrorCode& operator =(
            ErrorCode&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x state_and_error::ErrorCode object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ErrorCode& x) const;

    /*!
     * @brief Comparison operator.
     * @param x state_and_error::ErrorCode object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ErrorCode& x) const;

    /*!
     * @brief This function copies the value in member code
     * @param _code New value to be copied in member code
     */
    eProsima_user_DllExport void code(
            const std::string& _code);

    /*!
     * @brief This function moves the value in member code
     * @param _code New value to be moved in member code
     */
    eProsima_user_DllExport void code(
            std::string&& _code);

    /*!
     * @brief This function returns a constant reference to member code
     * @return Constant reference to member code
     */
    eProsima_user_DllExport const std::string& code() const;

    /*!
     * @brief This function returns a reference to member code
     * @return Reference to member code
     */
    eProsima_user_DllExport std::string& code();

private:

    std::string m_code;

};


/*!
 * @brief This class represents the structure ErrorCodeReply defined by the user in the IDL file.
 * @ingroup state_error
 */
class ErrorCodeReply
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ErrorCodeReply();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ErrorCodeReply();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object state_and_error::ErrorCodeReply that will be copied.
     */
    eProsima_user_DllExport ErrorCodeReply(
            const ErrorCodeReply& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object state_and_error::ErrorCodeReply that will be copied.
     */
    eProsima_user_DllExport ErrorCodeReply(
            ErrorCodeReply&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object state_and_error::ErrorCodeReply that will be copied.
     */
    eProsima_user_DllExport ErrorCodeReply& operator =(
            const ErrorCodeReply& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object state_and_error::ErrorCodeReply that will be copied.
     */
    eProsima_user_DllExport ErrorCodeReply& operator =(
            ErrorCodeReply&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x state_and_error::ErrorCodeReply object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ErrorCodeReply& x) const;

    /*!
     * @brief Comparison operator.
     * @param x state_and_error::ErrorCodeReply object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ErrorCodeReply& x) const;

    /*!
     * @brief This function copies the value in member description
     * @param _description New value to be copied in member description
     */
    eProsima_user_DllExport void description(
            const std::string& _description);

    /*!
     * @brief This function moves the value in member description
     * @param _description New value to be moved in member description
     */
    eProsima_user_DllExport void description(
            std::string&& _description);

    /*!
     * @brief This function returns a constant reference to member description
     * @return Constant reference to member description
     */
    eProsima_user_DllExport const std::string& description() const;

    /*!
     * @brief This function returns a reference to member description
     * @return Reference to member description
     */
    eProsima_user_DllExport std::string& description();


    /*!
     * @brief This function copies the value in member suggestion
     * @param _suggestion New value to be copied in member suggestion
     */
    eProsima_user_DllExport void suggestion(
            const std::string& _suggestion);

    /*!
     * @brief This function moves the value in member suggestion
     * @param _suggestion New value to be moved in member suggestion
     */
    eProsima_user_DllExport void suggestion(
            std::string&& _suggestion);

    /*!
     * @brief This function returns a constant reference to member suggestion
     * @return Constant reference to member suggestion
     */
    eProsima_user_DllExport const std::string& suggestion() const;

    /*!
     * @brief This function returns a reference to member suggestion
     * @return Reference to member suggestion
     */
    eProsima_user_DllExport std::string& suggestion();

private:

    std::string m_description;
    std::string m_suggestion;

};
/*!
 * @brief This class represents the interface ErrorHandle defined by the user in the IDL file.
 * @ingroup state_error
 */
class STATE_ERROR_DllAPI ErrorHandle 
{
public:



};

} // namespace state_and_error

#endif // _FAST_DDS_GENERATED_STATE_AND_ERROR_STATE_ERROR_H_



