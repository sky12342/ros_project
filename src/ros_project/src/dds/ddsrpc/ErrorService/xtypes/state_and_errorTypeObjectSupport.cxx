// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file state_and_errorTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "state_and_errorTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "state_and_error.hpp"


using namespace eprosima::fastdds::dds::xtypes;

namespace state_and_error {
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ErrorCode_type_identifier(
        TypeIdentifierPair& type_ids_ErrorCode)
{

    ReturnCode_t return_code_ErrorCode {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ErrorCode =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "state_and_error::ErrorCode", type_ids_ErrorCode);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ErrorCode)
    {
        StructTypeFlag struct_flags_ErrorCode = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ErrorCode = "state_and_error::ErrorCode";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ErrorCode;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ErrorCode;
        CompleteTypeDetail detail_ErrorCode = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ErrorCode, ann_custom_ErrorCode, type_name_ErrorCode.to_string());
        CompleteStructHeader header_ErrorCode;
        header_ErrorCode = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ErrorCode);
        CompleteStructMemberSeq member_seq_ErrorCode;
        {
            TypeIdentifierPair type_ids_code;
            ReturnCode_t return_code_code {eprosima::fastdds::dds::RETCODE_OK};
            return_code_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_code);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_code)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_code))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_code = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_code = 0x00000000;
            bool common_code_ec {false};
            CommonStructMember common_code {TypeObjectUtils::build_common_struct_member(member_id_code, member_flags_code, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_code, common_code_ec))};
            if (!common_code_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure code member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_code = "code";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_code;
            ann_custom_ErrorCode.reset();
            CompleteMemberDetail detail_code = TypeObjectUtils::build_complete_member_detail(name_code, member_ann_builtin_code, ann_custom_ErrorCode);
            CompleteStructMember member_code = TypeObjectUtils::build_complete_struct_member(common_code, detail_code);
            TypeObjectUtils::add_complete_struct_member(member_seq_ErrorCode, member_code);
        }
        CompleteStructType struct_type_ErrorCode = TypeObjectUtils::build_complete_struct_type(struct_flags_ErrorCode, header_ErrorCode, member_seq_ErrorCode);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ErrorCode, type_name_ErrorCode.to_string(), type_ids_ErrorCode))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "state_and_error::ErrorCode already registered in TypeObjectRegistry for a different type.");
        }
    }
}
// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_ErrorCodeReply_type_identifier(
        TypeIdentifierPair& type_ids_ErrorCodeReply)
{

    ReturnCode_t return_code_ErrorCodeReply {eprosima::fastdds::dds::RETCODE_OK};
    return_code_ErrorCodeReply =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "state_and_error::ErrorCodeReply", type_ids_ErrorCodeReply);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_ErrorCodeReply)
    {
        StructTypeFlag struct_flags_ErrorCodeReply = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_ErrorCodeReply = "state_and_error::ErrorCodeReply";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ErrorCodeReply;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ErrorCodeReply;
        CompleteTypeDetail detail_ErrorCodeReply = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ErrorCodeReply, ann_custom_ErrorCodeReply, type_name_ErrorCodeReply.to_string());
        CompleteStructHeader header_ErrorCodeReply;
        header_ErrorCodeReply = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ErrorCodeReply);
        CompleteStructMemberSeq member_seq_ErrorCodeReply;
        {
            TypeIdentifierPair type_ids_description;
            ReturnCode_t return_code_description {eprosima::fastdds::dds::RETCODE_OK};
            return_code_description =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_description);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_description)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_description))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_description = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_description = 0x00000000;
            bool common_description_ec {false};
            CommonStructMember common_description {TypeObjectUtils::build_common_struct_member(member_id_description, member_flags_description, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_description, common_description_ec))};
            if (!common_description_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure description member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_description = "description";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_description;
            ann_custom_ErrorCodeReply.reset();
            CompleteMemberDetail detail_description = TypeObjectUtils::build_complete_member_detail(name_description, member_ann_builtin_description, ann_custom_ErrorCodeReply);
            CompleteStructMember member_description = TypeObjectUtils::build_complete_struct_member(common_description, detail_description);
            TypeObjectUtils::add_complete_struct_member(member_seq_ErrorCodeReply, member_description);
        }
        {
            TypeIdentifierPair type_ids_suggestion;
            ReturnCode_t return_code_suggestion {eprosima::fastdds::dds::RETCODE_OK};
            return_code_suggestion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_suggestion);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_suggestion)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_suggestion))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_suggestion = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_suggestion = 0x00000001;
            bool common_suggestion_ec {false};
            CommonStructMember common_suggestion {TypeObjectUtils::build_common_struct_member(member_id_suggestion, member_flags_suggestion, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_suggestion, common_suggestion_ec))};
            if (!common_suggestion_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure suggestion member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_suggestion = "suggestion";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_suggestion;
            ann_custom_ErrorCodeReply.reset();
            CompleteMemberDetail detail_suggestion = TypeObjectUtils::build_complete_member_detail(name_suggestion, member_ann_builtin_suggestion, ann_custom_ErrorCodeReply);
            CompleteStructMember member_suggestion = TypeObjectUtils::build_complete_struct_member(common_suggestion, detail_suggestion);
            TypeObjectUtils::add_complete_struct_member(member_seq_ErrorCodeReply, member_suggestion);
        }
        CompleteStructType struct_type_ErrorCodeReply = TypeObjectUtils::build_complete_struct_type(struct_flags_ErrorCodeReply, header_ErrorCodeReply, member_seq_ErrorCodeReply);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ErrorCodeReply, type_name_ErrorCodeReply.to_string(), type_ids_ErrorCodeReply))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "state_and_error::ErrorCodeReply already registered in TypeObjectRegistry for a different type.");
        }
    }
}

} // namespace state_and_error

