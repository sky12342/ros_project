// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file state_and_error.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__STATE_AND_ERROR_STATE_AND_ERROR_HPP
#define FAST_DDS_GENERATED__STATE_AND_ERROR_STATE_AND_ERROR_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(STATE_AND_ERROR_SOURCE)
#define STATE_AND_ERROR_DllAPI __declspec( dllexport )
#else
#define STATE_AND_ERROR_DllAPI __declspec( dllimport )
#endif // STATE_AND_ERROR_SOURCE
#else
#define STATE_AND_ERROR_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define STATE_AND_ERROR_DllAPI
#endif // _WIN32

namespace state_and_error {

/*!
 * @brief This class represents the structure ErrorCode defined by the user in the IDL file.
 * @ingroup state_and_error
 */
class ErrorCode
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ErrorCode()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ErrorCode()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ErrorCode that will be copied.
     */
    eProsima_user_DllExport ErrorCode(
            const ErrorCode& x)
    {
                    m_code = x.m_code;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ErrorCode that will be copied.
     */
    eProsima_user_DllExport ErrorCode(
            ErrorCode&& x) noexcept
    {
        m_code = std::move(x.m_code);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ErrorCode that will be copied.
     */
    eProsima_user_DllExport ErrorCode& operator =(
            const ErrorCode& x)
    {

                    m_code = x.m_code;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ErrorCode that will be copied.
     */
    eProsima_user_DllExport ErrorCode& operator =(
            ErrorCode&& x) noexcept
    {

        m_code = std::move(x.m_code);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ErrorCode object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ErrorCode& x) const
    {
        return (m_code == x.m_code);
    }

    /*!
     * @brief Comparison operator.
     * @param x ErrorCode object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ErrorCode& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member code
     * @param _code New value to be copied in member code
     */
    eProsima_user_DllExport void code(
            const std::string& _code)
    {
        m_code = _code;
    }

    /*!
     * @brief This function moves the value in member code
     * @param _code New value to be moved in member code
     */
    eProsima_user_DllExport void code(
            std::string&& _code)
    {
        m_code = std::move(_code);
    }

    /*!
     * @brief This function returns a constant reference to member code
     * @return Constant reference to member code
     */
    eProsima_user_DllExport const std::string& code() const
    {
        return m_code;
    }

    /*!
     * @brief This function returns a reference to member code
     * @return Reference to member code
     */
    eProsima_user_DllExport std::string& code()
    {
        return m_code;
    }



private:

    std::string m_code;

};
/*!
 * @brief This class represents the structure ErrorCodeReply defined by the user in the IDL file.
 * @ingroup state_and_error
 */
class ErrorCodeReply
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ErrorCodeReply()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ErrorCodeReply()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ErrorCodeReply that will be copied.
     */
    eProsima_user_DllExport ErrorCodeReply(
            const ErrorCodeReply& x)
    {
                    m_description = x.m_description;

                    m_suggestion = x.m_suggestion;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ErrorCodeReply that will be copied.
     */
    eProsima_user_DllExport ErrorCodeReply(
            ErrorCodeReply&& x) noexcept
    {
        m_description = std::move(x.m_description);
        m_suggestion = std::move(x.m_suggestion);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ErrorCodeReply that will be copied.
     */
    eProsima_user_DllExport ErrorCodeReply& operator =(
            const ErrorCodeReply& x)
    {

                    m_description = x.m_description;

                    m_suggestion = x.m_suggestion;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ErrorCodeReply that will be copied.
     */
    eProsima_user_DllExport ErrorCodeReply& operator =(
            ErrorCodeReply&& x) noexcept
    {

        m_description = std::move(x.m_description);
        m_suggestion = std::move(x.m_suggestion);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ErrorCodeReply object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ErrorCodeReply& x) const
    {
        return (m_description == x.m_description &&
           m_suggestion == x.m_suggestion);
    }

    /*!
     * @brief Comparison operator.
     * @param x ErrorCodeReply object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ErrorCodeReply& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member description
     * @param _description New value to be copied in member description
     */
    eProsima_user_DllExport void description(
            const std::string& _description)
    {
        m_description = _description;
    }

    /*!
     * @brief This function moves the value in member description
     * @param _description New value to be moved in member description
     */
    eProsima_user_DllExport void description(
            std::string&& _description)
    {
        m_description = std::move(_description);
    }

    /*!
     * @brief This function returns a constant reference to member description
     * @return Constant reference to member description
     */
    eProsima_user_DllExport const std::string& description() const
    {
        return m_description;
    }

    /*!
     * @brief This function returns a reference to member description
     * @return Reference to member description
     */
    eProsima_user_DllExport std::string& description()
    {
        return m_description;
    }


    /*!
     * @brief This function copies the value in member suggestion
     * @param _suggestion New value to be copied in member suggestion
     */
    eProsima_user_DllExport void suggestion(
            const std::string& _suggestion)
    {
        m_suggestion = _suggestion;
    }

    /*!
     * @brief This function moves the value in member suggestion
     * @param _suggestion New value to be moved in member suggestion
     */
    eProsima_user_DllExport void suggestion(
            std::string&& _suggestion)
    {
        m_suggestion = std::move(_suggestion);
    }

    /*!
     * @brief This function returns a constant reference to member suggestion
     * @return Constant reference to member suggestion
     */
    eProsima_user_DllExport const std::string& suggestion() const
    {
        return m_suggestion;
    }

    /*!
     * @brief This function returns a reference to member suggestion
     * @return Reference to member suggestion
     */
    eProsima_user_DllExport std::string& suggestion()
    {
        return m_suggestion;
    }



private:

    std::string m_description;
    std::string m_suggestion;

};
/*!
 * @brief This class represents the interface ErrorHandle defined by the user in the IDL file.
 * @ingroup state_and_error
 */
class STATE_AND_ERROR_DllAPI ErrorHandle 
{
public:

};

} // namespace state_and_error

#endif // _FAST_DDS_GENERATED_STATE_AND_ERROR_STATE_AND_ERROR_HPP_


